{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Nathan Conroy\
CSC 214\
TA: 
\f1\fs25\fsmilli12800 \cf2 \cb3 \expnd0\expndtw0\kerning0
Mariana Flores Kim\
Assignment 9\
\
The purpose of this assignment was to introduce us to the concepts of asynchronous tasks, Handler threads, and using user inputted URLs to obtain images. For the AsyncTask portion of the assignment, I used an inefficient brute-force algorithm for obtaining the largest prime number below a user inputted value (from the page given to use within the assignment). I also created a button which quickly calculated the square root of the same number. When a large number is entered and the user first presses the prime number button and then the square root button, the program waits to calculate the square root until the prime calculation has been finished. This is because asynchronous tasks use the same thread and perform tasks one at a time. The third activity uses the same functions but instead of asynchronous tasks, it uses Handler threads. This also waits to calculate the square root until the prime calculation has finished. The difference with this is that a separate thread is created which runs in the background as to not disrupt the main UI. For the last activity, I used an AsyncTask to display an image in an TextView using an inputted URL. I decided to use this approach because I never really want to load 2 different images at the same time, and therefore performing the tasks asynchronously was a fitting approach.}